from typing import Tuple, Union, Optional, Sequence, Any

import numpy

def init(): ...
def get_version() -> Tuple[int, int, int]: ...

class Device:
    def make_context(self) -> Context: ...

class Context:
    @staticmethod
    def pop(): ...

class CompileError(Exception): ...
class Stream: ...
class DeviceAllocation: ...

class function_attribute:
    MAX_THREADS_PER_BLOCK: Any

def mem_alloc(bytes: int) -> DeviceAllocation: ...
def memcpy_htod(dest: Union[int, DeviceAllocation], src): ...
def memcpy_htod_async(dest: Union[int, DeviceAllocation], src, stream: Optional[Stream] = None): ...
def memcpy_dtoh(dest, src: Union[int, DeviceAllocation]): ...
def memcpy_dtoh_async(dest, src: Union[int, DeviceAllocation], stream: Optional[Stream] = None): ...
def memcpy_dtod(
    dest: Union[int, DeviceAllocation], src: Union[int, DeviceAllocation], size: int
): ...
def memcpy_dtod_async(
    dest: Union[int, DeviceAllocation],
    src: Union[int, DeviceAllocation],
    size: int,
    stream: Optional[Stream] = None,
): ...
def pagelocked_empty(shape: Sequence[int], dtype: numpy.dtype): ...
